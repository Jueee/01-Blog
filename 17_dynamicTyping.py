'''
动态类型(dynamic typing)是Python另一个重要的核心概念。
Python的变量(variable)不需要声明，而在赋值时，变量可以重新赋值为任意值。这些都与动态类型的概念相关。
'''

#引用和对象分离，是动态类型的核心。引用可以随时指向一个新的对象


#L1[0] = 10这一赋值操作，并不是改变L1的指向，而是对L1[0], 也就是表对象的一部份(一个元素)，进行操作.
#所以所有指向该对象的引用都受到影响。
L1 = [1,2,3]
L2 = L1
L1[0] = 10
print(L2)


'''
列表可以通过引用其元素，改变对象自身(in-place change)。这种对象类型，称为可变数据对象(mutable object)，词典也是这样的数据类型。

而像之前的数字和字符串，不能改变对象本身，只能改变引用的指向，称为不可变数据对象(immutable object)。

'''

#参数x是一个新的引用，指向a所指的对象。
#如果参数是不可变(immutable)的对象，a和x引用之间相互独立。对参数x的操作不会影响引用a。
def f(x):
	x = 100
	print(x)

a = 1
f(a)
print(a)

#如果传递的是可变(mutable)的对象，那么改变函数参数，有可能改变原对象。所有指向原对象的引用都会受影响
def f(x):
	x[0] = 100
	print(x)

a = [1,2,3]
f(a)
print(a)